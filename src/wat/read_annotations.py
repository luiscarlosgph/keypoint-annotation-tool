#!/usr/bin/python
# 
# Exemplary script to read the annotations generated by the web application
# in this repo.
#
# @author: Luis Carlos Garcia-Peraza Herrera (luiscarlos.gph@gmail.com).
# @date  : 20 Jan 2021.

import argparse
import json
import cv2
import numpy as np
import os

# My imports
import wat.common

def parse_cmdline_params():
    """
    @brief Parse command line parameters to get input and output file names.
    @param[in] argv Array of command line arguments.  
    @return input and output file names if they were specified.
    """
    parser = argparse.ArgumentParser()
    parser.add_argument('--dir', required=True, help='Path to the output directory.')
    parser.add_argument('--gt-suffix', default='_seg', required=False, 
        help='Suffix of the segmentation-like annotations.')
    args = parser.parse_args()
    return args


def valid_cmdline_params(args):
    if not os.path.isdir(args.dir):
        raise ValueError('[ERROR] The provided directory does not exist.')


def isimage(f):
    return True if '.png' in f or '.jpg' in f else False


def main():
    # Reading command line parameters
    args = parse_cmdline_params()
    valid_cmdline_params(args) 
    
    # List the annotated data
    files = wat.common.listdir(args.dir, onlyfiles=True)
    segmentations = [f for f in files if args.gt_suffix in f]
    jsons = [f for f in files if '.json' in f]
    images = [f for f in files if isimage(f) and f not in segmentations]
    
    # Loop over the annotated images
    print('Listing of the data found in the provided directory:')
    for im_fname, json_fname, seg_fname in zip(images, jsons, segmentations):
        print('Reading annotations for image:', im_fname)
        
        # Read image
        im_path = os.path.join(args.dir, im_fname)
        im = cv2.imread(im_path, cv2.IMREAD_UNCHANGED)

        # Read segmentation-like single-channel annotation
        seg_path = os.path.join(args.dir, seg_fname)
        seg = cv2.imread(seg_fname, cv2.IMREAD_UNCHANGED)

        # Read JSON annotation
        json_path = os.path.join(args.dir, json_fname)
        with open(json_path) as json_file:
            json_data = json.load(json_file)

        # Do something with the annotation here!
        print(json_data)
    
if __name__ == "__main__":
    main()
